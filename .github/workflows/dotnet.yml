# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET Build and Test

on:
  push:
    branches: [ "dev", "main" ]
  pull_request:
    branches: [ "dev", "main" ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Create external DLL stubs
      run: |
        mkdir -p ./
        # Create stub EncryptionApi.dll
        cat > EncryptionApi.cs << 'EOF'
        using System;
        namespace EncryptionApi.Services
        {
            public static class EncryptionService
            {
                public static string DecryptPassword(string encryptedPassword) => "stub_password";
            }
        }
        EOF
        
        # Create stub Helper.dll  
        cat > Helper.cs << 'EOF'
        using System;
        namespace Helper.Services
        {
            public static class HelperService
            {
                public static string GetHelperData() => "stub_data";
            }
        }
        EOF
        
        # Compile stubs
        dotnet new classlib -n EncryptionApi --force
        cp EncryptionApi.cs EncryptionApi/Class1.cs
        dotnet build EncryptionApi/EncryptionApi.csproj -o ./
        
        dotnet new classlib -n Helper --force  
        cp Helper.cs Helper/Class1.cs
        dotnet build Helper/Helper.csproj -o ./
        
        # Clean up
        rm -rf EncryptionApi Helper EncryptionApi.cs Helper.cs

    - name: Create dummy response file
      run: |
        cat > dummy-response.json << 'EOF'
        {
          "getToken": {
            "success": {
              "code": "01",
              "status": "success", 
              "message": "Token aktif",
              "data": {
                "valid_date": "2025191150000",
                "token": "github-actions-dummy-token"
              }
            }
          },
          "validateToken": {
            "success": {
              "code": "01",
              "status": "success",
              "message": "authorized"
            }
          },
          "search": {
            "perfectMatch": {
              "code": "01",
              "status": "Success",
              "message": "Data ditemukan",
              "inquiry_id": 12345,
              "data": []
            }
          },
          "generateReport": {
            "success": {
              "code": "01",
              "status": "success",
              "message": "Proses membuat report sedang dikerjakan"
            }
          },
          "getReport": {
            "successComplete": {
              "code": "01",
              "status": "success",
              "message": "Laporan berhasil dibuat"
            }
          },
          "downloadReport": {
            "success": {
              "code": "01",
              "status": "success",
              "message": "Laporan berhasil dibuat"
            }
          },
          "downloadPdfReport": {
            "success": {
              "binaryData": "dummy-pdf-data"
            }
          },
          "bulk": {
            "success": {
              "code": "01",
              "status": "success",
              "message": "Proses bulk sedang dikerjakan"
            }
          }
        }
        EOF

    - name: Configure test environment
      run: |
        # Override appsettings for CI/CD
        cat > appsettings.CI.json << 'EOF'
        {
          "Logging": {
            "LogLevel": {
              "Default": "Warning",
              "Microsoft.AspNetCore": "Warning"
            }
          },
          "PefindoConfig": {
            "BaseUrl": "https://api.test.com",
            "Username": "ci_user",
            "Password": "ci_password",
            "TimeoutSeconds": 30,
            "Domain": "api.test.com",
            "UseDummyResponses": true,
            "DummyResponseFilePath": "dummy-response.json"
          },
          "ConnectionStrings": {
            "DefaultConnection": "Host=localhost;Database=test_db;Username=test_user;Password=test_pass"
          },
          "DatabaseConfiguration": {
            "Names": {
              "idccore": "test.core",
              "idcen": "test.en", 
              "idcbk": "test.bk",
              "idcsync": "test.sync"
            },
            "ConnectionStrings": {
              "idccore": "Host=localhost;Database=test.core;Username=test;Password=test",
              "idcen": "Host=localhost;Database=test.en;Username=test;Password=test",
              "idcbk": "Host=localhost;Database=test.bk;Username=test;Password=test",
              "idcsync": "Host=localhost;Database=test.sync;Username=test;Password=test"
            }
          },
          "TokenCaching": {
            "BufferMinutes": 5,
            "FallbackCacheMinutes": 60
          }
        }
        EOF

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --no-restore --configuration Release

    - name: Run unit tests
      run: dotnet test --no-build --configuration Release --logger trx --results-directory TestResults/ --collect:"XPlat Code Coverage" --verbosity normal --filter "Category!=Integration"
      env:
        ASPNETCORE_ENVIRONMENT: CI

    - name: Run integration tests (if unit tests pass)
      if: success()
      run: dotnet test --no-build --configuration Release --logger trx --results-directory TestResults/ --verbosity normal --filter "Category=Integration" || echo "Integration tests failed but continuing..."
      env:
        ASPNETCORE_ENVIRONMENT: CI

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/
        retention-days: 7

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4  
      if: always()
      with:
        name: code-coverage
        path: TestResults/*/coverage.cobertura.xml
        retention-days: 7

    - name: Build summary
      if: always()
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **.NET Version**: ${{ env.DOTNET_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: CI" >> $GITHUB_STEP_SUMMARY
